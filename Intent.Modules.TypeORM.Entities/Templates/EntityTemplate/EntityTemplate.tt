<#@ template language="C#" inherits="TypeScriptTemplateBase<ClassModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Domain.Api" #>
import { Entity, Column, ManyToMany, JoinTable } from 'typeorm';

@Entity('jhi_<#= ClassName.ToLower() #>')
export class <#= ClassName #> extends <#= GetBaseClassName() #> {
<#  foreach(var attribute in Model.Attributes) { #>
  <#= GetAttributeDecorators(attribute) #>
  <#= attribute.Name #><#= attribute.TypeReference.IsNullable ? "?" : "" #>: <#= GetTypeName(attribute.TypeReference) #>;

<#  } #>
<#  foreach(var associationEnd in Model.AssociatedClasses.Where(x => x.IsNavigable)) { #>
  <#= GetAssociationDecorators(associationEnd) #>
  <#= associationEnd.Name #><#= associationEnd.IsNullable ? "?" : "" #>: <#= GetTypeName(associationEnd) #>;

<#  } #>
}