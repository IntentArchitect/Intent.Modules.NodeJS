<#@ template language="C#" inherits="TypeScriptTemplateBase<IList<Intent.Modelers.Domain.Api.ClassModel>>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
import { TypeOrmModuleOptions } from '@nestjs/typeorm';
import { ConfigService } from '@nestjs/config';

function typeOrmConfigFactory(configService: ConfigService): TypeOrmModuleOptions {
  const commonConf = {
    SYNCRONIZE: false,
    ENTITIES: [__dirname + '/domain/entities/*.entity{.ts,.js}'],
    MIGRATIONS: [__dirname + '/migrations/**/*{.ts,.js}'],
    MIGRATIONS_RUN: true
  };

  const config: TypeOrmModuleOptions = {
    name: 'default',
<# foreach (var option in GetDatabaseProviderOptions()) { #>
    <#= option #>,
<# } #>
    logging: true,
    synchronize: true,
    entities: commonConf.ENTITIES,
    migrations: commonConf.MIGRATIONS,
    migrationsRun: commonConf.MIGRATIONS_RUN
  };

  if (process.env.NODE_ENV === 'prod') {
    // your production options here
  }

  if (process.env.NODE_ENV === 'test') {
    // your test options here
  }

  return config;
}

export { typeOrmConfigFactory };