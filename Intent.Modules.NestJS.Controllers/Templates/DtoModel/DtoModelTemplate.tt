<#@ template language="C#" inherits="TypeScriptTemplateBase<Intent.Modelers.Services.Api.DTOModel, Intent.Modules.NestJS.Controllers.Templates.DtoModel.DtoModelDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>

export class <#= ClassName #>
{<# foreach(var field in Model.Fields) { #>

<# foreach (var decorator in GetFieldDecorators(field)) { #>
  <#= decorator #>
<# } #>
  <#= field.Name.ToCamelCase() #><#= field.TypeReference.IsNullable ? "?" : "" #>: <#= GetTypeName(field.TypeReference) #>;
<#  }
    if (Model.IsMapped) {#>

  static from<#= GetTypeName(Model.Mapping) #>(<#= Model.Mapping.Element.Name.ToCamelCase() #>: <#= GetTypeName(Model.Mapping) #>) {
    if (<#= Model.Mapping.Element.Name.ToCamelCase() #> == null) {
        return null;
    }
    const dto = new <#= ClassName #>();
    <#= GetMappings() #>
    return dto;
  }

  static requiredRelations: string[] = [<#=  string.Join(", ", GetRequiredRelations().Select(x => "\"" + x + "\"")) #>];
<#  } #>
}