<#@ template language="C#" inherits="TypeScriptTemplateBase<Intent.Modelers.Services.Api.ServiceModel, Intent.Modules.NestJS.Controllers.Templates.Service.ServiceDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>
<#@ import namespace="Intent.Modules.TypeScript.Weaving.Decorators" #>
import { Injectable } from '@nestjs/common';

@Injectable()
export class <#= ClassName #> {

  //@IntentCanAdd()
  constructor(<#= GetConstructorParameters() #>) {}
<#  foreach(var operation in Model.Operations) { #>

  <#= this.IntentIgnoreBodyDecorator() #>
  async <#= operation.Name.ToCamelCase() #>(<#= GetParameterDefinitions(operation) #>): Promise<<#= GetReturnType(operation) #>> {
    <#= GetImplementation(operation) #>
  }
<#  } #>
}
