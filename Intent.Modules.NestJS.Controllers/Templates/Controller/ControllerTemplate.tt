<#@ template language="C#" inherits="TypeScriptTemplateBase<Intent.Modelers.Services.Api.ServiceModel, Intent.Modules.NestJS.Controllers.Templates.Controller.ControllerDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>
import { Controller, Logger } from '@nestjs/common';

<# foreach (var decorator in GetClassDecorators()) { #>
<#= decorator #>
<# } #>
export class <#= ClassName #> {
  logger = new Logger('<#= ClassName #>');

  constructor(private readonly <#= ServiceClassName.ToCamelCase() #>: <#= ServiceClassName #>) {}
<# foreach(var operation in Model.Operations) { #>

<# foreach (var decorator in GetOperationDecorators(operation)) { #>
  <#= decorator #>
<# } #>
  async <#= operation.Name.ToCamelCase() #>(<#= GetOperationParameters(operation) #>): Promise<<#= GetReturnType(operation) #>> {
<#      if (operation.ReturnType != null) { #>
    var result = await this.<#= ServiceClassName.ToCamelCase() #>.<#= operation.Name.ToCamelCase() #>(<#= GetParameters(operation) #>);
    return result;
<#      } else { #>
    return await this.<#= ServiceClassName.ToCamelCase() #>.<#= operation.Name.ToCamelCase() #>(<#= GetParameters(operation) #>);
<#      } #>
  }
<#  } #>
}