// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.NestJS.Controllers.Templates.ControllerTemplate
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.TypeScript.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using Intent.Modelers.Services.Api;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.NodeJS\Intent.Modules.NestJS.Controllers\Templates\ControllerTemplate\ControllerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ControllerTemplate : TypeScriptTemplateBase<ServiceModel>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("import { Body, Controller, Delete, Get, Param, Post, Put, Req } from \'@nestjs/com" +
                    "mon\';\r\n\r\n\r\n@Controller(\'api/users\')\r\n@UseGuards(AuthGuard, RolesGuard)\r\n@UseInte" +
                    "rceptors(LoggingInterceptor)\r\n@ApiBearerAuth()\r\n@ApiUseTags(\'user-resource\')\r\nex" +
                    "port class ");
            
            #line 19 "C:\Dev\Intent.Modules.NodeJS\Intent.Modules.NestJS.Controllers\Templates\ControllerTemplate\ControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" {\r\n  logger = new Logger(\'UserController\');\r\n\r\n  constructor(private readonly us" +
                    "erService: UserService) {}\r\n\r\n  @Get(\'/\')\r\n  @ApiResponse({\r\n    status: 200,\r\n " +
                    "   description: \'List all records\',\r\n    type: User\r\n  })\r\n  async getAllUsers(@" +
                    "Req() req: Request): Promise<User[]> {\r\n    const pageRequest: PageRequest = new" +
                    " PageRequest(req.query.page, req.query.size, req.query.sort);\r\n    const [result" +
                    "s, count] = await this.userService.findAndCount({\r\n      skip: +pageRequest.page" +
                    " * pageRequest.size,\r\n      take: +pageRequest.size,\r\n      order: pageRequest.s" +
                    "ort.asOrder()\r\n    });\r\n    HeaderUtil.addPaginationHeaders(req.res, new Page(re" +
                    "sults, count, pageRequest));\r\n    return results;\r\n  }\r\n\r\n  @Post(\'/\')\r\n  @Roles" +
                    "(RoleType.ADMIN)\r\n  @ApiOperation({ title: \'Create user\' })\r\n  @ApiResponse({\r\n " +
                    "   status: 201,\r\n    description: \'The record has been successfully created.\',\r\n" +
                    "    type: User\r\n  })\r\n  @ApiResponse({ status: 401, description: \'Go fuck yourse" +
                    "lf.\' })\r\n  @ApiResponse({ status: 403, description: \'Forbidden.\' })\r\n  @ApiRespo" +
                    "nse({ status: 500, description: \'XXX.\' })\r\n  async createUser(@Req() req: Reques" +
                    "t, @Body() user: User): Promise<User> {\r\n    const created = await this.userServ" +
                    "ice.save(user);\r\n    HeaderUtil.addEntityCreatedHeaders(req.res, \'User\', created" +
                    ".id);\r\n    return created;\r\n  }\r\n\r\n  @Put(\'/\')\r\n  @Roles(RoleType.ADMIN)\r\n  @Api" +
                    "Operation({ title: \'Update user\' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    des" +
                    "cription: \'The record has been successfully updated.\',\r\n    type: User\r\n  })\r\n  " +
                    "async updateUser(@Req() req: Request, @Body() user: User): Promise<User> {\r\n    " +
                    "HeaderUtil.addEntityCreatedHeaders(req.res, \'User\', user.id);\r\n    return await " +
                    "this.userService.update(user);\r\n  }\r\n\r\n  @Get(\'/:login\')\r\n  @ApiResponse({\r\n    " +
                    "status: 200,\r\n    description: \'The found record\',\r\n    type: User\r\n  })\r\n  asyn" +
                    "c getUser(@Param(\'login\') loginValue: string): Promise<User> {\r\n    return await" +
                    " this.userService.find({ where: { login: loginValue } });\r\n  }\r\n\r\n  @Delete(\'/:l" +
                    "ogin\')\r\n  @ApiOperation({ title: \'Delete login user\' })\r\n  @ApiResponse({\r\n    s" +
                    "tatus: 204,\r\n    description: \'The record has been successfully deleted.\'\r\n  })\r" +
                    "\n  @Roles(RoleType.ADMIN)\r\n  async deleteUser(@Req() req: Request, @Param(\'login" +
                    "\') loginValue: string): Promise<User> {\r\n    HeaderUtil.addEntityDeletedHeaders(" +
                    "req.res, \'User\', loginValue);\r\n    const userToDelete = await this.userService.f" +
                    "ind({ where: { login: loginValue } });\r\n    return await this.userService.delete" +
                    "(userToDelete);\r\n  }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
