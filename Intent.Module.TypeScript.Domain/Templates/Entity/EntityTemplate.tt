<#@ template language="C#" inherits="TypeScriptTemplateBase<Intent.Modelers.Domain.Api.ClassModel, Intent.Module.TypeScript.Domain.Templates.Entity.EntityDecorator>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Domain.Api" #>
<#= GetClassDecorators() #>
export class <#= ClassName #> {
<#= GetDecoratorsOutput(x => x.GetBeforeFields()) #><#  foreach(var attribute in Model.Attributes) { #>
  <#= GetAttributeDecorators(attribute) #>
  <#= attribute.Name.ToCamelCase() #><#= attribute.TypeReference.IsNullable ? "?" : "" #>: <#= GetTypeName(attribute.TypeReference) #>;
<#  } #>
<#  foreach(var associationEnd in Model.AssociatedClasses.Where(x => x.IsNavigable)) { #>
  <#= GetAssociationDecorators(associationEnd) #>
  <#= associationEnd.Name.ToCamelCase() #><#= associationEnd.IsNullable ? "?" : "" #>: <#= GetTypeName(associationEnd) #>;
<#  } #><#= GetDecoratorsOutput(x => x.GetAfterFields()) #>
}